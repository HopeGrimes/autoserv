#!/usr/bin/python3
# use this code for turning TV's on or off

import cgitb
import urllib.request as urllib2
import time
from datetime import datetime
import sys
import socket
import os
cgitb.enable()
from wakeonlan import send_magic_packet

print ('content-type: text/html\r\n')

cmd = sys.argv[1]
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# To access LGs IP settings on the newer models, press and hold the gear button
# on an old style remote (not smart remote) for 7-8 seconds then press 1105, and 'OK'
# this should get you in to the advanced menu to adjust IP address as well as seeing
# the MAC address.  LG TV's get turned on via WoL to MAC address
# on the newer than 2018 consumer smart TV models AES-128 encryption is utilized.  I downloaded
# json and npm and used npm to install [lg-tv-ipcontrol-cli] from github user Wes Souza
# the python for the WC Foldback TV utilizes Wes Souza's code to send the AES-128 encrypted commands
# using the keycode generated by the TV

# RPi's and device IP's
# wc_fbTV = '10.120.24.87'
wc_hlTV = '10.120.24.88'
wc_hrTV = '10.120.24.89'
atrium1url = 'http://10.120.24.83/cgi-bin/raw.pl?cmd='
atrium2url = 'http://10.120.24.82/cgi-bin/raw.pl?cmd='

# serial commands
lgPION = 'POWR0001%0D'
lgPIOFF = 'POWR0000%0D'

# concatate PI variables
atrium1on = atrium1url + lgPION + '\r'
atrium1off = atrium1url + lgPIOFF + '\r'
atrium2on = atrium1url + lgPION + '\r'
atrium2off = atrium1url + lgPIOFF + '\r'

PORT = 9761

# LGTV Variables
lgTVON = b'ka 00 01\r'
lgTVOFF = b'ka 00 00\r'
fblgTVOFF = 'POWER off'

# json ip control file
lgtvipcont = '/opt/json/node_modules/lgtv-ip-control-cli/bin/lgtv-ip-control.cjs '
lg_ip_ctrlOFF = 'power off'

# WCFoldback TV
wcfbtv_IP = '-o 10.120.24.87 '
wcfbtv_key = '-k BVSEAN8N '


# here we are going to define the log file that we will use for troubleshooting and stuff
def log(txt):
	date = datetime.now().strftime("%H:%M_%m/%d?%y")
	f = open('/opt/scripts/display-automation/display-automation'+'.log', "a")
	f.write(date +'\tcommand=['+ cmd +']\t\t'+ txt +'\r\n')
	f.close

# define additional functions

def wcfbtvON():
#	log('WC FB TV on')
	send_magic_packet('b0:37:95:21:0e:7f')

def wcfbtvOFF():
#	log('WC FB TV off')
	os.system(lgtvipcont+wcfbtv_IP+wcfbtv_key+lg_ip_ctrlOFF)

def wchltvON():
#	log('WC HL TV on')
	send_magic_packet('7c:64:6c:a1:2c:45')

def wchltvOFF():
#	log('WC HL TV off')
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.settimeout(5)
	sock.connect((wc_hlTV, PORT))
	sock.sendall(lgTVOFF)
	msg = sock.recv(9761)
	print (msg)
	sock.close()

def wchrtvON():
#	log('WC HR TV on')
	send_magic_packet('64:E4:A5:8A:6F:7E')

def wchrtvOFF():
#	log('WC HR TV off')
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.settimeout(5)
	sock.connect((wc_hrTV, PORT))
	sock.sendall(lgTVOFF)
	msg = sock.recv(9761)
	print (msg)
	sock.close()

if cmd == 'allON':
	wcfbtvON()
	wchltvON()
	wchrtvON()
	contents = urllib2.urlopen(atrium1url+lgPION).read()
	time.sleep(1)
	contents = urllib2.urlopen(atrium2url+lgPION).read()
	time.sleep(1)

elif cmd == 'allOFF':
	wcfbtvOFF()
	wchltvOFF()
	wchrtvOFF()
	contents = urllib2.urlopen(atrium1url+lgPIOFF).read()
	time.sleep(1)
	contents = urllib2.urlopen(atrium2url+lgPIOFF).read()
	time.sleep(1)

elif cmd == 'wcON':
#	wcfbtvON()
	wchltvON()
	wchrtvON()
#	send_magic_packet('64:E4:A5:8A:6F:7E')

elif cmd == 'wcOFF':
#	wcfbtvOFF()
	wchltvOFF()
	wchrtvOFF()
#	os.system(lgtvipcont+wcfbtv_IP+wcfbtv_key+lg_ip_ctrlOFF)

elif cmd == 'atriumON':
	contents = urllib2.urlopen(atrium1url+lgPION).read()
	time.sleep(1)
	contents = urllib2.urlopen(atrium2url+lgPION).read()
	time.sleep(1)

elif cmd == 'atriumOFF':
	contents = urllib2.urlopen(atrium1url+lgPIOFF).read()
	time.sleep(1)
	contents = urllib2.urlopen(atrium2url+lgPIOFF).read()
	time.sleep(1)

elif cmd == 'wc_fbtvON':
#	log('WC FB TV on')
	wcfbtvON()

elif cmd == 'wc_fbtvOFF':
#	log('WC FB TV off')
	wcfbtvOFF()

elif cmd == 'wc_hltvON':
#	log('WC HL TV on')
	send_magic_packet('7c:64:6c:a1:2c:45')

elif cmd == 'wc_hltvOFF':
#	log('WC HL TV off')
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.settimeout(5)
	sock.connect((wc_hlTV, PORT))
	sock.sendall(lgTVOFF)
	msg = sock.recv(9761)
	print (msg)
	sock.close()

elif cmd == 'wc_hrtvON':
#	log('WC HR TV on')
	send_magic_packet('64:E4:A5:8A:6F:7E')

elif cmd == 'wc_hrtvOFF':
#	log('WC HR TV off')
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.settimeout(5)
	sock.connect((wc_hrTV, PORT))
	sock.sendall(lgTVOFF)
	msg = sock.recv(9761)
	print (msg)
	sock.close()


else:
	print ('no match for command')
